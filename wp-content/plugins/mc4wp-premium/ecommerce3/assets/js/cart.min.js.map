{"version":3,"sources":["ecommerce3/assets/js/cart.js"],"names":["require","undefined","r","e","n","t","o","i","f","c","u","a","Error","code","p","exports","call","length","1","module","previousEmailAddress","previousDataString","scheduledFunctionCall","checkoutForm","document","querySelector","formSubmitted","serialize","ajaxurl","mc4wp_ecommerce_cart","ajax_url","woocommerce_params","sendFormData","data","hash","previous_billing_email","emailAddress","dataString","JSON","stringify","billing_email","test","request","XMLHttpRequest","open","setRequestHeader","send","addEventListener","window","clearTimeout","setTimeout","form-serialize","2","k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","key","value","match","hash_assign","keys","shift","between","Array","isArray","push","_values","string","index","isNaN","children","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","form","options","serializer","elements","radio_store","Object","create","element","disabled","name","nodeName","type","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice"],"mappings":"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","file":"cart.min.js","sourcesContent":["(function () { var require = undefined; var define = undefined; (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar checkoutForm = document.querySelector('form.woocommerce-checkout, form[name=\"checkout\"]');\nvar previousEmailAddress;\nvar previousDataString;\nvar scheduledFunctionCall;\nvar formSubmitted = false;\nvar serialize = require('form-serialize');\nvar ajaxurl = typeof mc4wp_ecommerce_cart !== \"undefined\" ? mc4wp_ecommerce_cart.ajax_url : woocommerce_params.ajax_url;\n\nfunction isEmailAddressValid(emailAddress) {\n   var regex = /\\S+@\\S+\\.\\S+/;\n   return regex.test(emailAddress);\n}\n\nfunction sendFormData() {\n   var data = serialize(checkoutForm, { hash: true });\n   data.previous_billing_email = previousEmailAddress;\n   var allowedFields = ['billing_email', 'billing_first_name', 'billing_last_name', 'billing_address_1', 'billing_address_2', 'billing_city', 'billing_state', 'billing_country'];\n   var dataString = JSON.stringify(data, allowedFields);\n\n   // schedule cart update if email looks valid && data changed.\n   if (isEmailAddressValid(data.billing_email) && dataString != previousDataString) {\n      var request = new XMLHttpRequest();\n      request.open('POST', ajaxurl + \"?action=mc4wp_ecommerce_schedule_cart\", true);\n      request.setRequestHeader('Content-Type', 'application/json');\n      request.send(dataString);\n\n      previousDataString = dataString;\n      previousEmailAddress = data.billing_email;\n   }\n}\n\nif (checkoutForm) {\n   // don't send more than once every 6 seconds\n   checkoutForm.addEventListener('change', function () {\n      scheduledFunctionCall && window.clearTimeout(scheduledFunctionCall);\n      scheduledFunctionCall = window.setTimeout(sendFormData, 6000);\n   });\n\n   checkoutForm.addEventListener('submit', function () {\n      formSubmitted = true;\n   });\n\n   // always send before unloading window, but not if form was submitted\n   window.addEventListener('beforeunload', function () {\n      if (!formSubmitted) {\n         sendFormData();\n      }\n   });\n}\n\n},{\"form-serialize\":2}],2:[function(require,module,exports){\n// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n// node names which could be successful controls\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n// Matches bracket notation.\nvar brackets = /(\\[[^\\[\\]]*\\])/g;\n\n// serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\nfunction serialize(form, options) {\n    if (typeof options != 'object') {\n        options = { hash: !!options };\n    }\n    else if (options.hash === undefined) {\n        options.hash = true;\n    }\n\n    var result = (options.hash) ? {} : '';\n    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);\n\n    var elements = form && form.elements ? form.elements : [];\n\n    //Object store each radio and set if it's empty or not\n    var radio_store = Object.create(null);\n\n    for (var i=0 ; i<elements.length ; ++i) {\n        var element = elements[i];\n\n        // ingore disabled fields\n        if ((!options.disabled && element.disabled) || !element.name) {\n            continue;\n        }\n        // ignore anyhting that is not considered a success field\n        if (!k_r_success_contrls.test(element.nodeName) ||\n            k_r_submitter.test(element.type)) {\n            continue;\n        }\n\n        var key = element.name;\n        var val = element.value;\n\n        // we can't just use element.value for checkboxes cause some browsers lie to us\n        // they say \"on\" for value when the box isn't checked\n        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n            val = undefined;\n        }\n\n        // If we want empty elements\n        if (options.empty) {\n            // for checkbox\n            if (element.type === 'checkbox' && !element.checked) {\n                val = '';\n            }\n\n            // for radio\n            if (element.type === 'radio') {\n                if (!radio_store[element.name] && !element.checked) {\n                    radio_store[element.name] = false;\n                }\n                else if (element.checked) {\n                    radio_store[element.name] = true;\n                }\n            }\n\n            // if options empty is true, continue only if its radio\n            if (val == undefined && element.type == 'radio') {\n                continue;\n            }\n        }\n        else {\n            // value-less fields are ignored unless options.empty is true\n            if (!val) {\n                continue;\n            }\n        }\n\n        // multi select boxes\n        if (element.type === 'select-multiple') {\n            val = [];\n\n            var selectOptions = element.options;\n            var isSelectedOptions = false;\n            for (var j=0 ; j<selectOptions.length ; ++j) {\n                var option = selectOptions[j];\n                var allowedEmpty = options.empty && !option.value;\n                var hasValue = (option.value || allowedEmpty);\n                if (option.selected && hasValue) {\n                    isSelectedOptions = true;\n\n                    // If using a hash serializer be sure to add the\n                    // correct notation for an array in the multi-select\n                    // context. Here the name attribute on the select element\n                    // might be missing the trailing bracket pair. Both names\n                    // \"foo\" and \"foo[]\" should be arrays.\n                    if (options.hash && key.slice(key.length - 2) !== '[]') {\n                        result = serializer(result, key + '[]', option.value);\n                    }\n                    else {\n                        result = serializer(result, key, option.value);\n                    }\n                }\n            }\n\n            // Serialize if no selected options and options.empty is true\n            if (!isSelectedOptions && options.empty) {\n                result = serializer(result, key, '');\n            }\n\n            continue;\n        }\n\n        result = serializer(result, key, val);\n    }\n\n    // Check for all empty radio buttons and serialize them with key=\"\"\n    if (options.empty) {\n        for (var key in radio_store) {\n            if (!radio_store[key]) {\n                result = serializer(result, key, '');\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction parse_keys(string) {\n    var keys = [];\n    var prefix = /^([^\\[\\]]*)/;\n    var children = new RegExp(brackets);\n    var match = prefix.exec(string);\n\n    if (match[1]) {\n        keys.push(match[1]);\n    }\n\n    while ((match = children.exec(string)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n    if (keys.length === 0) {\n        result = value;\n        return result;\n    }\n\n    var key = keys.shift();\n    var between = key.match(/^\\[(.+?)\\]$/);\n\n    if (key === '[]') {\n        result = result || [];\n\n        if (Array.isArray(result)) {\n            result.push(hash_assign(null, keys, value));\n        }\n        else {\n            // This might be the result of bad name attributes like \"[][foo]\",\n            // in this case the original `result` object will already be\n            // assigned to an object literal. Rather than coerce the object to\n            // an array, or cause an exception the attribute \"_values\" is\n            // assigned as an array.\n            result._values = result._values || [];\n            result._values.push(hash_assign(null, keys, value));\n        }\n\n        return result;\n    }\n\n    // Key is an attribute name and can be assigned directly.\n    if (!between) {\n        result[key] = hash_assign(result[key], keys, value);\n    }\n    else {\n        var string = between[1];\n        // +var converts the variable into a number\n        // better than parseInt because it doesn't truncate away trailing\n        // letters and actually fails if whole thing is not a number\n        var index = +string;\n\n        // If the characters between the brackets is not a number it is an\n        // attribute name and can be assigned directly.\n        if (isNaN(index)) {\n            result = result || {};\n            result[string] = hash_assign(result[string], keys, value);\n        }\n        else {\n            result = result || [];\n            result[index] = hash_assign(result[index], keys, value);\n        }\n    }\n\n    return result;\n}\n\n// Object/hash encoding serializer.\nfunction hash_serializer(result, key, value) {\n    var matches = key.match(brackets);\n\n    // Has brackets? Use the recursive assignment function to walk the keys,\n    // construct any missing objects in the result tree and make the assignment\n    // at the end of the chain.\n    if (matches) {\n        var keys = parse_keys(key);\n        hash_assign(result, keys, value);\n    }\n    else {\n        // Non bracket notation can make assignments directly.\n        var existing = result[key];\n\n        // If the value has been assigned already (for instance when a radio and\n        // a checkbox have the same name attribute) convert the previous value\n        // into an array before pushing into it.\n        //\n        // NOTE: If this requirement were removed all hash creation and\n        // assignment could go through `hash_assign`.\n        if (existing) {\n            if (!Array.isArray(existing)) {\n                result[key] = [ existing ];\n            }\n\n            result[key].push(value);\n        }\n        else {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\n// urlform encoding serializer\nfunction str_serialize(result, key, value) {\n    // encode newlines as \\r\\n cause the html spec says so\n    value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n    value = encodeURIComponent(value);\n\n    // spaces should be '+' rather than '%20'.\n    value = value.replace(/%20/g, '+');\n    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;\n\n},{}]},{},[1]);\n })();"]}